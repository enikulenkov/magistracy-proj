#-*-Makefile-*-

# Location of the CUDA Toolkit
CUDA_PATH ?= "/opt/cuda"
CUDALIB_PATH = /usr/lib/nvidia-304
CUDARTLIB_PATH = /usr/lib/x86_64-linux-gnu

# internal flags
NVCC        = nvcc

ifeq ($(USE_INTEL),1)
	CC          = icc
else
	CC          = gcc
endif

FORTRAN_CC  = gfortran
#NVCCFLAGS   := -m32 -arch=sm_20 --compiler-options=-fno-exceptions
ifeq ($(DEBUG),1)
	NVCCFLAGS   = -arch=sm_20 --compiler-options=-fno-exceptions -G -g
else
	NVCCFLAGS   = -arch=sm_20 --compiler-options=-fno-exceptions -O3
endif

ifeq ($(DEBUG),1)
	CCFLAGS     = -g
else
	CCFLAGS     = -O3
endif

ifeq ($(PROFILE),1)
	CCFLAGS     += -pg
endif

ifeq ($(DEBUG), 1)
DEFINES     = -DDEBUG
endif

NVCCLDFLAGS =

ifeq ($(USE_INTEL),1)
	BLAS_LIBS = -lmkl_rt
else
	BLAS_LIBS = -lblas
endif

LDFLAGS     += -L$(BUILD_HOME)/lib $(UTILS_LIB) $(ALG_LIB) -lm
ifeq ($(USE_GPUOCELOT),1)
LDFLAGS_CUDA     += -L/opt/cuda/lib -locelot
else
LDFLAGS_CUDA     += -L$(CUDALIB_PATH) -L$(CUDARTLIB_PATH) -lcudart -lcuda
endif

ifeq ($(PROFILE),1)
	LDFLAGS   += -pg
endif

INCPATH     += -I$(BUILD_HOME)/include

################################################################################

# Implicit rules
%.o : %.c
	$(CC) -c $(DEFINES) $(INCPATH) $(CCFLAGS) -o $@ $<

%.w.o : %.c
	$(CC) -c $(DEFINES) $(INCPATH) $(CCFLAGS) -o $@ $<

%.o: %.cu
	$(NVCC) $(NVCCFLAGS) $(INCLUDES) $(ALL_CCFLAGS) $(GENCODE_FLAGS) -o $@ -c $<

%.o: %.f90
	$(FORTRAN_CC) $(LDFLAGS) -o $@ $+

################################################################################
# Lib names
UTILS_LIB = $(BUILD_HOME)/lib/libutils.a
ALG_LIB = $(BUILD_HOME)/lib/libalgs.a

################################################################################
# Build primitives

MAKE        = make -e
MAKE_LIB    = ar r $@ $^
LINK_BINARY = $(CC) -o $@ $< $(LDFLAGS)
LINK_BINARY_CUDA = $(CC) -o $@ $< $(LDFLAGS) $(LDFLAGS_CUDA)

################################################################################
# Common targets
bldall: all

clean:
	rm -f *.o $(BINS)

clobber: clean
	rm -f tags TAGS

# vim: set filetype=make : 
